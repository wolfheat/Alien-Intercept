//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MainActionMap"",
            ""id"": ""f9ee2078-ffe4-453b-b88d-684c4cfededb"",
            ""actions"": [
                {
                    ""name"": ""G"",
                    ""type"": ""Button"",
                    ""id"": ""f79db4c6-367a-474b-a3da-05e2ca70a8dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ESC"",
                    ""type"": ""Button"",
                    ""id"": ""024b33c9-6ac2-4e91-a7be-fbabb1ba6485"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CTRL"",
                    ""type"": ""Button"",
                    ""id"": ""1ee17613-fb52-45e6-8e6e-e699db00387c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""2c91812a-cc21-4428-b5d0-911d5518a616"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""5a3387ce-1ae4-48df-ba14-41082f03b61f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""6845f600-2431-45a6-87d2-4d96995458e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P"",
                    ""type"": ""Button"",
                    ""id"": ""28220e9f-7b44-4564-b57d-d5223b3bfe9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MusicToggle"",
                    ""type"": ""Button"",
                    ""id"": ""ff5e771c-c280-486d-9a37-2a3b12af0cfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WayPointType"",
                    ""type"": ""Button"",
                    ""id"": ""f020fc4b-859e-4818-a01a-596814d9ef73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateR"",
                    ""type"": ""Button"",
                    ""id"": ""b84c5444-63c7-47d1-b052-fd0520c8af89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateL"",
                    ""type"": ""Button"",
                    ""id"": ""261ecb11-a85b-4a6b-9b92-741e2ab666c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""f4710383-a038-495f-904e-ea376bc1522a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""9fb9b636-6f51-4b4a-8757-9a726dccdcca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""d8900628-bd73-4cbd-8570-1adcd8378d91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""9998685b-fb87-4a0f-80b4-a2785773082b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7b17ecfd-8909-459c-a307-4987c76a368a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""2315c3ea-0db7-4d09-a812-ff2bd53793ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5204ef2e-a944-4be0-80e6-c6c5fac86007"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b761e82d-85fa-4a44-a125-6fadb7adc8f5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""594e172f-418f-423c-b630-46a48fa1c8f0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f27fb15-4332-411f-a113-b19d05394889"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb9d1bcd-eaa9-4a80-bfe0-a758ff5e0cc9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8589ed13-0520-4834-a456-f7cf6dd28a2e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1409768c-2601-4688-89ef-836902b9c736"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27b3cf1a-47ad-4c07-a0f5-f5fbed10da49"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""267b8df3-692f-4b76-ab08-a9189394f56e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WayPointType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01381140-50d9-4e54-884e-e079b8a6489f"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MusicToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80d06709-9922-4349-85bd-8b85fb98daa4"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""550ad096-44cb-4bb5-bf4e-4dbf580938e1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33903719-8aab-4c86-adf8-e824bc8a79f5"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CTRL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fe5df97-c631-4a47-bb84-f6e6ac07cfbd"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""G"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a7071ae-2c11-485b-a2dd-dd9672df073f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce3ece00-9bf0-4910-8dd7-17a9e8fb5afb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ESC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""023fc2ba-97ad-42c3-86ff-991bec0c2512"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainActionMap
        m_MainActionMap = asset.FindActionMap("MainActionMap", throwIfNotFound: true);
        m_MainActionMap_G = m_MainActionMap.FindAction("G", throwIfNotFound: true);
        m_MainActionMap_ESC = m_MainActionMap.FindAction("ESC", throwIfNotFound: true);
        m_MainActionMap_CTRL = m_MainActionMap.FindAction("CTRL", throwIfNotFound: true);
        m_MainActionMap_Space = m_MainActionMap.FindAction("Space", throwIfNotFound: true);
        m_MainActionMap_X = m_MainActionMap.FindAction("X", throwIfNotFound: true);
        m_MainActionMap_R = m_MainActionMap.FindAction("R", throwIfNotFound: true);
        m_MainActionMap_P = m_MainActionMap.FindAction("P", throwIfNotFound: true);
        m_MainActionMap_MusicToggle = m_MainActionMap.FindAction("MusicToggle", throwIfNotFound: true);
        m_MainActionMap_WayPointType = m_MainActionMap.FindAction("WayPointType", throwIfNotFound: true);
        m_MainActionMap_RotateR = m_MainActionMap.FindAction("RotateR", throwIfNotFound: true);
        m_MainActionMap_RotateL = m_MainActionMap.FindAction("RotateL", throwIfNotFound: true);
        m_MainActionMap_Shift = m_MainActionMap.FindAction("Shift", throwIfNotFound: true);
        m_MainActionMap_Attack = m_MainActionMap.FindAction("Attack", throwIfNotFound: true);
        m_MainActionMap_LeftClick = m_MainActionMap.FindAction("LeftClick", throwIfNotFound: true);
        m_MainActionMap_RightClick = m_MainActionMap.FindAction("RightClick", throwIfNotFound: true);
        m_MainActionMap_Shoot = m_MainActionMap.FindAction("Shoot", throwIfNotFound: true);
        m_MainActionMap_Move = m_MainActionMap.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainActionMap
    private readonly InputActionMap m_MainActionMap;
    private IMainActionMapActions m_MainActionMapActionsCallbackInterface;
    private readonly InputAction m_MainActionMap_G;
    private readonly InputAction m_MainActionMap_ESC;
    private readonly InputAction m_MainActionMap_CTRL;
    private readonly InputAction m_MainActionMap_Space;
    private readonly InputAction m_MainActionMap_X;
    private readonly InputAction m_MainActionMap_R;
    private readonly InputAction m_MainActionMap_P;
    private readonly InputAction m_MainActionMap_MusicToggle;
    private readonly InputAction m_MainActionMap_WayPointType;
    private readonly InputAction m_MainActionMap_RotateR;
    private readonly InputAction m_MainActionMap_RotateL;
    private readonly InputAction m_MainActionMap_Shift;
    private readonly InputAction m_MainActionMap_Attack;
    private readonly InputAction m_MainActionMap_LeftClick;
    private readonly InputAction m_MainActionMap_RightClick;
    private readonly InputAction m_MainActionMap_Shoot;
    private readonly InputAction m_MainActionMap_Move;
    public struct MainActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public MainActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @G => m_Wrapper.m_MainActionMap_G;
        public InputAction @ESC => m_Wrapper.m_MainActionMap_ESC;
        public InputAction @CTRL => m_Wrapper.m_MainActionMap_CTRL;
        public InputAction @Space => m_Wrapper.m_MainActionMap_Space;
        public InputAction @X => m_Wrapper.m_MainActionMap_X;
        public InputAction @R => m_Wrapper.m_MainActionMap_R;
        public InputAction @P => m_Wrapper.m_MainActionMap_P;
        public InputAction @MusicToggle => m_Wrapper.m_MainActionMap_MusicToggle;
        public InputAction @WayPointType => m_Wrapper.m_MainActionMap_WayPointType;
        public InputAction @RotateR => m_Wrapper.m_MainActionMap_RotateR;
        public InputAction @RotateL => m_Wrapper.m_MainActionMap_RotateL;
        public InputAction @Shift => m_Wrapper.m_MainActionMap_Shift;
        public InputAction @Attack => m_Wrapper.m_MainActionMap_Attack;
        public InputAction @LeftClick => m_Wrapper.m_MainActionMap_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_MainActionMap_RightClick;
        public InputAction @Shoot => m_Wrapper.m_MainActionMap_Shoot;
        public InputAction @Move => m_Wrapper.m_MainActionMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_MainActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IMainActionMapActions instance)
        {
            if (m_Wrapper.m_MainActionMapActionsCallbackInterface != null)
            {
                @G.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnG;
                @G.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnG;
                @G.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnG;
                @ESC.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnESC;
                @ESC.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnESC;
                @ESC.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnESC;
                @CTRL.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnCTRL;
                @CTRL.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnCTRL;
                @CTRL.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnCTRL;
                @Space.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnSpace;
                @X.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnX;
                @R.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnR;
                @R.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnR;
                @R.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnR;
                @P.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnP;
                @P.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnP;
                @P.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnP;
                @MusicToggle.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnMusicToggle;
                @MusicToggle.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnMusicToggle;
                @MusicToggle.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnMusicToggle;
                @WayPointType.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnWayPointType;
                @WayPointType.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnWayPointType;
                @WayPointType.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnWayPointType;
                @RotateR.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRotateR;
                @RotateR.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRotateR;
                @RotateR.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRotateR;
                @RotateL.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRotateL;
                @RotateL.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRotateL;
                @RotateL.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRotateL;
                @Shift.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnShift;
                @Attack.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnAttack;
                @LeftClick.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnRightClick;
                @Shoot.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnShoot;
                @Move.started -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MainActionMapActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MainActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @G.started += instance.OnG;
                @G.performed += instance.OnG;
                @G.canceled += instance.OnG;
                @ESC.started += instance.OnESC;
                @ESC.performed += instance.OnESC;
                @ESC.canceled += instance.OnESC;
                @CTRL.started += instance.OnCTRL;
                @CTRL.performed += instance.OnCTRL;
                @CTRL.canceled += instance.OnCTRL;
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
                @R.started += instance.OnR;
                @R.performed += instance.OnR;
                @R.canceled += instance.OnR;
                @P.started += instance.OnP;
                @P.performed += instance.OnP;
                @P.canceled += instance.OnP;
                @MusicToggle.started += instance.OnMusicToggle;
                @MusicToggle.performed += instance.OnMusicToggle;
                @MusicToggle.canceled += instance.OnMusicToggle;
                @WayPointType.started += instance.OnWayPointType;
                @WayPointType.performed += instance.OnWayPointType;
                @WayPointType.canceled += instance.OnWayPointType;
                @RotateR.started += instance.OnRotateR;
                @RotateR.performed += instance.OnRotateR;
                @RotateR.canceled += instance.OnRotateR;
                @RotateL.started += instance.OnRotateL;
                @RotateL.performed += instance.OnRotateL;
                @RotateL.canceled += instance.OnRotateL;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MainActionMapActions @MainActionMap => new MainActionMapActions(this);
    public interface IMainActionMapActions
    {
        void OnG(InputAction.CallbackContext context);
        void OnESC(InputAction.CallbackContext context);
        void OnCTRL(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnR(InputAction.CallbackContext context);
        void OnP(InputAction.CallbackContext context);
        void OnMusicToggle(InputAction.CallbackContext context);
        void OnWayPointType(InputAction.CallbackContext context);
        void OnRotateR(InputAction.CallbackContext context);
        void OnRotateL(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
